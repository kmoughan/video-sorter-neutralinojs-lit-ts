{
    "lit component": {
        "prefix": "lit-component",
        "body": [
            "import { LitElement, html, css } from \"lit\";",
            "import { customElement, property, state } from \"lit/decorators.js\";",
            "",
            "@customElement(\"my-page\")",
            "class MyPage extends LitElement {",
            "    static styles = css``;",
            "    ",
            "    render() {",
            "        return html`<p>hello ${myvar}</p>`;",
            "    }",
            "",
            "}",
            "",
            "// @customElement(\"my-page\")",
            "// class MyPage extends LitElement {",
            "    // // scoped styles",
            "    // static styles = css``;",
            "    //",
            "    // // create reactive property",
            "    // @property({ attribute: false })",
            "    // article = {",
            "    //     title: \"My Nifty Article\",",
            "    //     text: \"Some witty text.\",",
            "    // };",
            "    //",
            "    // // create static property with defaults",
            "    // static properties = {",
            "    //     mode: { type: String },",
            "    //     data: { attribute: false },",
            "    // };",
            "    // constructor() {",
            "    //     super();",
            "    //     this.data = {};  // empty {} will assign defaults",
            "    // }",
            "    // // declare internal reactive state",
            "    // @state()",
            "    // protected _active = false;",
            "    //",
            "    // connectedCallback() {",
            "    //     super.connectedCallback();",
            "    //     addEventListener(\"keydown\", this._handleKeydown);",
            "    // }",
            "    //",
            "    // disconnectedCallback() {",
            "    //     super.disconnectedCallback();",
            "    //     window.removeEventListener(\"keydown\", this._handleKeydown);",
            "    // }",
            "    //",
            "    // subTemplate() {",
            "    //     return html`<header>${this.article.title}</header>`;",
            "    // }",
            "    //",
            "    // render() {",
            "    //     return html` ${this.subTemplate()} <p>body</p>`;",
            "    // }",
            "//}",
            "",
            "//# https://lit.dev/docs/components/overview/",
            "",
            "// manually trigger update",
            "// @property and @state should update automatically (except arrays|objects)",
            "//this.requestUpdate();"
        ],
        "description": "lit component"
    },
    "x-button": {
        "prefix": "x-button",
        "body": ["<x-button class=\"b1 big round outline\" icon=\"1\" @click=${()=>alert('clicked')}>MyButton</x-button>"],
        "description": "x-button"
    },
    "@property": {
        "prefix": ["@property", "lit @property"],
        "body": ["@property({ type: String })", "variable: string = \"\";", "// declare var: string;"],
        "description": "lit component @property"
    },
    "connectedCallback": {
        "prefix": ["connectedCallback()", "lit connectedCallback()"],
        "body": ["connectedCallback() {", "    super.connectedCallback();", "}"],
        "description": "lit component connectedCallback()"
    },
    "disconnectedCallback": {
        "prefix": ["disconnectedCallback()", "lit disconnectedCallback()"],
        "body": ["disconnectedCallback() {", "    super.disconnectedCallback();", "}"],
        "description": "lit component disconnectedCallback()"
    },
    "static styles = css": {
        "prefix": "lit-css",
        "body": ["static styles = css``;"],
        "description": "static styles = css"
    }
}
